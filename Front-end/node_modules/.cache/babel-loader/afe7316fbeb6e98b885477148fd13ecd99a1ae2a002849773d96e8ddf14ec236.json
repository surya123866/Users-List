{"ast":null,"code":"import{fetchUsersFromApi,postUserToApi,upDateUserToApi,deleteUserFromApi}from\"../Services/Api\";import{fetchUsersFromLocalDb,saveUserToLocalDb,deleteUserFromLocalDb}from\"../Services/localDb\";export const GET_USERS=\"GET_USERS\";export const ADD_USER=\"ADD_USER\";export const DELETE_USER=\"DELETE_USER\";export const SAVE_USER=\"SAVE_USER\";export const saveUser=userData=>{localStorage.setItem(\"user\",JSON.stringify(userData));return{type:SAVE_USER,payload:userData};};export const getUsers=()=>async dispatch=>{try{// Check if there are records in the local database\nconst localDbUsers=fetchUsersFromLocalDb();if(localDbUsers.length>0){dispatch({type:GET_USERS,payload:localDbUsers});}else{// If local database is empty, fetch from the API\nconst apiUsers=await fetchUsersFromApi();dispatch({type:GET_USERS,payload:apiUsers});// Save API data to local database for future use\napiUsers.forEach(user=>saveUserToLocalDb(user));}}catch(error){console.error(\"Error fetching users:\",error);}};export const addUser=userData=>dispatch=>{// Add user to the local database and dispatch action\nsaveUserToLocalDb(userData);dispatch({type:ADD_USER,payload:userData});postUserToApi(userData);};export const updateUser=updatedUser=>dispatch=>{// Add user to the local database and dispatch action\nsaveUserToLocalDb(updatedUser);dispatch({type:ADD_USER,payload:updatedUser});upDateUserToApi(updatedUser);};export const deleteUser=userId=>dispatch=>{// Delete user from the local database and dispatch action\ndeleteUserFromLocalDb(userId);dispatch({type:DELETE_USER,payload:userId});deleteUserFromApi(userId);};// Add other actions as needed (edit, view details, etc.)","map":{"version":3,"names":["fetchUsersFromApi","postUserToApi","upDateUserToApi","deleteUserFromApi","fetchUsersFromLocalDb","saveUserToLocalDb","deleteUserFromLocalDb","GET_USERS","ADD_USER","DELETE_USER","SAVE_USER","saveUser","userData","localStorage","setItem","JSON","stringify","type","payload","getUsers","dispatch","localDbUsers","length","apiUsers","forEach","user","error","console","addUser","updateUser","updatedUser","deleteUser","userId"],"sources":["C:/Users/Santosh Kommanapalli/OneDrive/Desktop/users-dashboard/front-end/src/actions/actions.js"],"sourcesContent":["import {\r\n  fetchUsersFromApi,\r\n  postUserToApi,\r\n  upDateUserToApi,\r\n  deleteUserFromApi,\r\n} from \"../Services/Api\";\r\nimport {\r\n  fetchUsersFromLocalDb,\r\n  saveUserToLocalDb,\r\n  deleteUserFromLocalDb,\r\n} from \"../Services/localDb\";\r\n\r\nexport const GET_USERS = \"GET_USERS\";\r\nexport const ADD_USER = \"ADD_USER\";\r\nexport const DELETE_USER = \"DELETE_USER\";\r\nexport const SAVE_USER = \"SAVE_USER\";\r\n\r\nexport const saveUser = (userData) => {\r\n  localStorage.setItem(\"user\", JSON.stringify(userData));\r\n  return { type: SAVE_USER, payload: userData };\r\n};\r\n\r\nexport const getUsers = () => async (dispatch) => {\r\n  try {\r\n    // Check if there are records in the local database\r\n    const localDbUsers = fetchUsersFromLocalDb();\r\n    if (localDbUsers.length > 0) {\r\n      dispatch({ type: GET_USERS, payload: localDbUsers });\r\n    } else {\r\n      // If local database is empty, fetch from the API\r\n      const apiUsers = await fetchUsersFromApi();\r\n      dispatch({ type: GET_USERS, payload: apiUsers });\r\n      // Save API data to local database for future use\r\n      apiUsers.forEach((user) => saveUserToLocalDb(user));\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching users:\", error);\r\n  }\r\n};\r\n\r\nexport const addUser = (userData) => (dispatch) => {\r\n  // Add user to the local database and dispatch action\r\n  saveUserToLocalDb(userData);\r\n  dispatch({ type: ADD_USER, payload: userData });\r\n  postUserToApi(userData);\r\n};\r\nexport const updateUser = (updatedUser) => (dispatch) => {\r\n  // Add user to the local database and dispatch action\r\n  saveUserToLocalDb(updatedUser);\r\n  dispatch({ type: ADD_USER, payload: updatedUser });\r\n  upDateUserToApi(updatedUser);\r\n};\r\n\r\nexport const deleteUser = (userId) => (dispatch) => {\r\n  // Delete user from the local database and dispatch action\r\n  deleteUserFromLocalDb(userId);\r\n  dispatch({ type: DELETE_USER, payload: userId });\r\n  deleteUserFromApi(userId);\r\n};\r\n\r\n// Add other actions as needed (edit, view details, etc.)\r\n"],"mappings":"AAAA,OACEA,iBAAiB,CACjBC,aAAa,CACbC,eAAe,CACfC,iBAAiB,KACZ,iBAAiB,CACxB,OACEC,qBAAqB,CACrBC,iBAAiB,CACjBC,qBAAqB,KAChB,qBAAqB,CAE5B,MAAO,MAAM,CAAAC,SAAS,CAAG,WAAW,CACpC,MAAO,MAAM,CAAAC,QAAQ,CAAG,UAAU,CAClC,MAAO,MAAM,CAAAC,WAAW,CAAG,aAAa,CACxC,MAAO,MAAM,CAAAC,SAAS,CAAG,WAAW,CAEpC,MAAO,MAAM,CAAAC,QAAQ,CAAIC,QAAQ,EAAK,CACpCC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC,CACtD,MAAO,CAAEK,IAAI,CAAEP,SAAS,CAAEQ,OAAO,CAAEN,QAAS,CAAC,CAC/C,CAAC,CAED,MAAO,MAAM,CAAAO,QAAQ,CAAGA,CAAA,GAAM,KAAO,CAAAC,QAAQ,EAAK,CAChD,GAAI,CACF;AACA,KAAM,CAAAC,YAAY,CAAGjB,qBAAqB,CAAC,CAAC,CAC5C,GAAIiB,YAAY,CAACC,MAAM,CAAG,CAAC,CAAE,CAC3BF,QAAQ,CAAC,CAAEH,IAAI,CAAEV,SAAS,CAAEW,OAAO,CAAEG,YAAa,CAAC,CAAC,CACtD,CAAC,IAAM,CACL;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAvB,iBAAiB,CAAC,CAAC,CAC1CoB,QAAQ,CAAC,CAAEH,IAAI,CAAEV,SAAS,CAAEW,OAAO,CAAEK,QAAS,CAAC,CAAC,CAChD;AACAA,QAAQ,CAACC,OAAO,CAAEC,IAAI,EAAKpB,iBAAiB,CAACoB,IAAI,CAAC,CAAC,CACrD,CACF,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC/C,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,OAAO,CAAIhB,QAAQ,EAAMQ,QAAQ,EAAK,CACjD;AACAf,iBAAiB,CAACO,QAAQ,CAAC,CAC3BQ,QAAQ,CAAC,CAAEH,IAAI,CAAET,QAAQ,CAAEU,OAAO,CAAEN,QAAS,CAAC,CAAC,CAC/CX,aAAa,CAACW,QAAQ,CAAC,CACzB,CAAC,CACD,MAAO,MAAM,CAAAiB,UAAU,CAAIC,WAAW,EAAMV,QAAQ,EAAK,CACvD;AACAf,iBAAiB,CAACyB,WAAW,CAAC,CAC9BV,QAAQ,CAAC,CAAEH,IAAI,CAAET,QAAQ,CAAEU,OAAO,CAAEY,WAAY,CAAC,CAAC,CAClD5B,eAAe,CAAC4B,WAAW,CAAC,CAC9B,CAAC,CAED,MAAO,MAAM,CAAAC,UAAU,CAAIC,MAAM,EAAMZ,QAAQ,EAAK,CAClD;AACAd,qBAAqB,CAAC0B,MAAM,CAAC,CAC7BZ,QAAQ,CAAC,CAAEH,IAAI,CAAER,WAAW,CAAES,OAAO,CAAEc,MAAO,CAAC,CAAC,CAChD7B,iBAAiB,CAAC6B,MAAM,CAAC,CAC3B,CAAC,CAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}